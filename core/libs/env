env_command=$(basename $0)

export current_env=${env_command#env-}

. ${dev_ops_path}/core/main.env

bin_file=$(basename "$0")

env_path="${dev_ops_path}/envs/${bin_file#env-}"

define_ytt_vars() {
	for var in $main_ytt_vars
	do
		echo "#@ $var='$(eval "echo \$$var")'"
	done
}

make_buildin_composes() {
	rm ${env_path}/.*.tmp
	for service_compose in $(ls "${dev_ops_path}/core/composes/")
	do
		( define_ytt_vars; cat "${dev_ops_path}/core/composes/${service_compose}/service.yml" ) | ytt -f - > \
			${env_path}/.${service_compose}.yml.tmp
	done
}

make_docker_compose() {
	make_buildin_composes
	( define_ytt_vars; cat "${dev_ops_path}/core/libs/compose.yml" "${env_path}/services.yml" ) | ytt -f -
}

make_volumes() {
	for invoked_service in $(make_docker_compose | grep 'service:' | awk '{print $2}')
	do
		if [ -f "${dev_ops_path}/core/composes/${invoked_service}/volume.yml" ]; then
			cat "${dev_ops_path}/core/composes/${invoked_service}/volume.yml"
		fi
	done
}

execute() {
	( make_docker_compose; echo 'volumes:';  make_volumes | grep -v '^volumes:' ) | ${DOCKER_SUDO_CMD} docker-compose -f /dev/stdin "$@"
}

if [ "${1}" = ggg ]; then
	shift
	times=1
	while ! execute "$@"
	do
		echo "Retry $((times++)) times..."
	done
else
	execute "$@"
fi

