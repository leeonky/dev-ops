env_command=$(basename $0)

export current_env=${env_command#env-}

. ${dev_ops_path}/core/main.env

bin_file=$(basename "$0")

env_path="${dev_ops_path}/envs/${bin_file#env-}"

define_ytt_vars() {
	for var in $main_ytt_vars
	do
		echo "#@ $var='$(eval "echo \$$var")'"
	done
}

make_buildin_composes() {
	rm ${env_path}/.*.tmp
	for service_compose in $(ls "${dev_ops_path}/core/composes/")
	do
		( define_ytt_vars; cat "${dev_ops_path}/core/libs/service.yml"; cat "${dev_ops_path}/core/composes/${service_compose}/service.yml" ) | ytt -f - > \
			${env_path}/.${service_compose}.yml.tmp
	done
}

make_docker_compose() {
	( define_ytt_vars; cat "${dev_ops_path}/core/libs/service.yml"; cat "${dev_ops_path}/core/libs/compose.yml" "${env_path}/services.yml" ) | ytt -f -
}

make_volumes() {
	for invoked_service in $(make_docker_compose | grep 'service:' | awk '{print $2}')
	do
		if [ -f "${dev_ops_path}/core/composes/${invoked_service}/volume.yml" ]; then
			( define_ytt_vars; cat "${dev_ops_path}/core/libs/service.yml"; cat "${dev_ops_path}/core/composes/${invoked_service}/volume.yml" ) | ytt -f -
		fi
	done
}

execute_bin() {
	local all_volumes="$(make_volumes | grep -v '^volumes:')"
	if [ "$all_volumes" != "" ]; then
		all_volumes="volumes:\n$all_volumes"
	fi

	if make_docker_compose | grep -q '^networks:'; then
		local default_network=''
	else
		local default_network="networks:\n  default:\n    name: net_${PROJECT_NAME}_${current_env}${current_task}"
	fi

	local compose_file="${env_path}/.docker-compose${current_task}.yml.tmp"
	( make_docker_compose; echo "$all_volumes"; echo "$default_network" ) > "$compose_file"
	${DOCKER_SUDO_CMD} docker-compose  --project-name ${PROJECT_NAME}_${current_env}${current_task} -f "$compose_file" "$@"
}

is_integer() {
	[ -n "${1}" ] && [ $(printf "%d" $1 2>/dev/null) -eq $1 2>/dev/null ] 
}

execute() {
	if [ "${1}" = ggg ]; then
		shift
		times=1
		while ! execute "$@"
		do
			echo "Retry $((times++)) times..."
		done
	elif is_integer "$1"; then
		export current_task="$1"
		shift 1
		execute_bin "$@"
	else
		export current_task=''
		execute_bin "$@"
	fi
}

make_buildin_composes

if [ $task_count -eq 1 ]; then
	execute "$@"
else
	if is_integer $1; then
		execute "$@"
	else
		for i in $(seq $task_count)
		do
			execute $i "$@" | sed -e "s/^/${current_env}:$i > /" &
		done
		wait
	fi
fi

